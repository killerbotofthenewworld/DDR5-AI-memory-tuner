name: CI/CD Pipeline
# Trigger: minor comment to rerun workflows after GHCR policy update

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
        pip install -r requirements.txt

    - name: Run black code formatter check
      run: |
        black --check src/ tests/ main.py || echo "⚠️ Black formatting issues found - continuing pipeline"
      continue-on-error: true

    - name: Run flake8 linting
      run: |
        flake8 src/ tests/ main.py || echo "⚠️ Linting issues found - continuing pipeline"
      continue-on-error: true

    - name: Run type checking with mypy
      run: |
        mypy src/ || echo "⚠️ Type checking issues found - continuing pipeline"
      continue-on-error: true
    
    - name: Run tests with pytest (with coverage gate)
      run: |
        pytest tests/ --cov=src --cov-config=.coveragerc --cov-report=xml --cov-report=term --cov-fail-under=80 -v
      continue-on-error: false
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
      continue-on-error: true

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"
    
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
    
    - name: Run Bandit security scan
      run: |
        bandit -r src/ -f json || echo "⚠️ Security issues found - review recommended"
      continue-on-error: true
    
    - name: Check for known vulnerabilities
      run: |
        safety check || echo "⚠️ Known vulnerabilities found - review recommended"
      continue-on-error: true

  build:
    needs: [test, security]
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine wheel setuptools
    
    - name: Build package
      run: |
        python -m build
    
    - name: Check package
      run: |
        twine check dist/*
    
    - name: Publish to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        twine upload dist/* --skip-existing || echo "⚠️ PyPI upload failed or package already exists"
      continue-on-error: true

  docker:
    needs: [test, security]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.event_name == 'release'
    permissions:
      contents: read
      packages: write
      id-token: write
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        # Force lowercase and a stable package name for GHCR
        images: ghcr.io/${{ github.repository_owner }}/ddr5-ai-memory-tuner
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        # Use a single target platform to avoid cross-arch torch wheel issues in CI
        platforms: linux/amd64
        build-args: |
          TORCH_INDEX_URL=https://download.pytorch.org/whl/cpu
          TORCH_VERSION=2.3.1
          TORCHVISION_VERSION=0.18.1
          TORCHAUDIO_VERSION=2.3.1
      env:
        # Surface clearer message if org package creation is blocked
        DOCKER_BUILDKIT: 1

  windows_installer:
    needs: [test, security]
    runs-on: windows-latest
    if: github.event_name == 'release'
    steps:
      - uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install Inno Setup
        uses: crazy-max/ghaction-chocolatey@v3
        with:
          args: install innosetup --no-progress --yes
      - name: Build Windows installer
        shell: pwsh
        run: |
          .\windows\installer\build-installer.ps1
      - name: Upload installer artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-installer
          path: windows/installer/DDR5-AI-Memory-Tuner-Setup.exe
      - name: Attach to Release
        if: github.event_name == 'release'
        uses: softprops/action-gh-release@v2
        with:
          files: windows/installer/DDR5-AI-Memory-Tuner-Setup.exe

  documentation:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"
    
    - name: Install documentation dependencies
      run: |
        python -m pip install --upgrade pip
        pip install sphinx sphinx-rtd-theme myst-parser
    
    - name: Build documentation
      run: |
        mkdir -p docs
        echo "# DDR5 AI Sandbox Simulator Documentation" > docs/index.md
        echo "Auto-generated documentation placeholder" >> docs/index.md
    
    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      if: github.ref == 'refs/heads/main'
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./docs
      continue-on-error: true
